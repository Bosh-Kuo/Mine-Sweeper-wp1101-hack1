{"version":3,"sources":["components/Cell.js","components/Modal.js","components/Dashboard.js","util/randomFixSeed.js","util/createBoard.js","util/reveal.js","components/Board.js","components/HomePage.js","containers/MineSweeper.js","App.js","index.js"],"names":["Cell","rowIdx","colIdx","detail","updateFlag","revealCell","cellStyle","background","revealed","value","mineCheckPattern","x","y","checkPattern","color","numColorCode","border","ID","toString","onContextMenu","e","onClick","style","className","id","flagged","num","Modal","restartGame","backToHome","win","useState","render","setRender","useEffect","setTimeout","opacity","Dashboard","remainFlagNum","gameOver","time","setTime","sTime","setSTime","console","log","setInterval","id2","clearInterval","randomFixSeed","require","seedrandom","randomNum","min","max","Math","floor","board","newNonMinesCount","checkPointList","boardSize","length","checkPoint","afterReveal","Board","mineNum","setBoard","nonMineCount","setNonMineCount","mineLocations","setMineLocations","setGameOver","setRemainFlagNum","setWin","freshBoard","newBoardObj","subCol","push","mineCount","checkAround","number","createBoard","preventDefault","newBoard","location","newboard","map","rowArray","display","item","HomePage","controlWrapper","startGameOnClick","mineNumOnChange","boardSizeOnChange","showPanel","setShowPanel","error","setError","type","step","defaultValue","onChange","MineSweeper","startGame","setStartGame","setMineNum","setBoardSize","Bar","document","querySelectorAll","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.880701c8.chunk.js","sourcesContent":["/****************************************************************************\n  FileName      [ Cell.js ]\n  PackageName   [ src/components ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file generates a single cell. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React from \"react\";\nimport \"./css/Cell.css\"\n\n// Nothing to do with this file.\n// The input 'detail' of Cell is one single cell which have properties of x, y, value, flagged and revealed.\nexport default function Cell({rowIdx, colIdx, detail, updateFlag, revealCell}){\n    const cellStyle = {\n        background: detail.revealed ? \n            detail.value === '💣' ? '#880000' : mineCheckPattern(detail.x, detail.y) : checkPattern(detail.x, detail.y),\n        color: numColorCode(detail.value),\n        border: detail.revealed ? \"2px inset darkgrey\" : \"2px outset white\",\n    }\n    const ID = rowIdx.toString() +'-'+ colIdx.toString()\n    return (\n            <div \n                onContextMenu = {(e) => updateFlag(e, detail.x, detail.y) }\n                onClick = {() => revealCell(detail.x, detail.y)}\n                style = {cellStyle}\n                className = 'cell'\n                id = {ID}\n            >\n                {!detail.revealed && detail.flagged ? \"🚩\" : detail.revealed && detail.value !== 0 ? (detail.value === '💣' ? '💣' : detail.value) : ''}\n            </div>\n        \n    );\n}\n\n\n\nconst mineCheckPattern = (x, y) => {\n    if(x % 2 === 0 && y % 2 === 0) return '#c0c0c0';\n    else if (x % 2 === 0 && y % 2 !== 0) return '#bbbbbb';\n    else if (x % 2 !== 0 && y % 2 === 0)  return '#bbbbbb';\n    else return '#c0c0c0';\n}\n\nconst checkPattern = (x, y) => {\n    if(x % 2 === 0 && y % 2 === 0) return '#dddddd';\n    else if (x % 2 === 0 && y % 2 !== 0) return '#d0d0d0';\n    else if (x % 2 !== 0 && y % 2 === 0)  return '#d0d0d0';\n    else return '#dddddd';\n}\n\nconst numColorCode = (num) => {\n    if(num === 1) return '#0307de';\n    else if(num === 2) return '#15760f';\n    else if(num === 3) return '#dc1410';\n    else if(num === 4) return '#02087e';\n    else if(num === 5) return '#630501';\n    else if(num === 6) return '#ec596c';\n    else if(num === 7) return '#edf451';\n    else if(num === 8) return '#56dddc';\n}\n","/****************************************************************************\n  FileName      [ Modal.js ]\n  PackageName   [ src/components ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file generates the Modal component. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React, { useEffect, useState } from \"react\";\nimport './css/Modal.css';\n\nexport default function Modal({ restartGame, backToHome, win }) {\n    const [render, setRender] = useState(false);\n    useEffect(() => {\n        setTimeout(() => {\n            setRender(true);\n        }, 1000);\n    }, []);\n\n    /* -- TODO 5-1 -- */\n    /* Useful Hint: style = {{opacity: 1 or 0 }} */\n    let style;\n    render ?  (style = {opacity: 1}) : (style = {opacity: 0})\n    return (\n        <div className=\"modal\"  style = {style}>\n            <div className=\"modalWrapper\"></div>\n            <div className=\"modalContent\">\n                <div className=\"modalResult\">{win ? \"WIN\" : \"Game Over\"}</div>\n                <div className=\"modalBtnWrapper\">\n                    <div className=\"modalBtn\" onClick={restartGame}>{win ? \"New Game\" : \"Try Again\"} </div>\n                    <div className=\"modalBtn\" onClick={backToHome}>Back to Home</div>\n                </div>\n            </div>\n            <div className=\"modalWrapper\"></div>\n        </div>\n\n\n    );\n}","/****************************************************************************\n  FileName      [ Dashnoard.js ]\n  PackageName   [ src/components ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file generates the Dashboard. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React, { useEffect, useState } from 'react';\nimport \"./css/Dashboard.css\"\nlet timeIntervalId;\n\nexport default function Dashboard({ remainFlagNum, gameOver, win }) {\n    let [time, setTime] = useState(0);\n    let [sTime, setSTime] = useState(0);\n\n    {/* -- TODO 7 -- */ }\n    {/* Useful Hint: Try to understand the difference between time and sTime. */ }\n\n\n    useEffect(() => {\n        if (!gameOver && !win) {\n            console.log(\"Game time!\")\n            setSTime(0)\n            setTime(0)\n            var id = setInterval(() => setTime((time) => time + 1), 1000);\n            var id2 = setInterval(() => setSTime((sTime) => sTime + 1), 1000);\n            \n        }else{\n            console.log(\"Over\")\n        }\n\n        return () => {\n            clearInterval(id2)\n            clearInterval(id)\n        }\n\n    }, [gameOver, win]);\n\n    useEffect(() => {\n    }, []);\n    \n\n    return (\n        <div className=\"dashBoard\" >\n            <div id='dashBoard_col1' >\n                <div className='dashBoard_col'>\n                    <p className='icon'>🚩</p>\n                    {remainFlagNum}\n                </div>\n            </div>\n            <div id='dashBoard_col2' >\n                <div className='dashBoard_col'>\n                    <p className='icon'>⏰</p>\n                    {gameOver ? sTime : time}\n                </div>\n            </div>\n        </div>\n    );\n}\n","/****************************************************************************\n  FileName      [ randomFixSeed.js ]\n  PackageName   [ src/util ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file makes random numbers. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nvar seedrandom = require('seedrandom');\nconst randomFixSeed = seedrandom('Over my dead body');\n\nexport default function randomNum(min = 0, max){\n    return Math.floor(randomFixSeed() * (max - min + 1) + min);\n}\n","/****************************************************************************\n  FileName      [ createBoard.js ]\n  PackageName   [ src/util ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file generates the pattern of mines and the board. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport randomNum from \"./randomFixSeed\";\n\nexport default (boardSize, mineNum) => {\n    let board = [];\n    let mineLocations = [];\n\n    // Print Board function (For testing)\n    const printBoard = () => {\n        console.log(\"Current Board\")\n        for (let x = 0; x < boardSize; x++) {\n            console.log(board[x].map((x) => {\n                return (x.value !== '💣' ? x.value.toString() + \" \" : x.value)\n            }))\n        }\n    }\n\n    // Create a blank board\n    for (let x = 0; x < boardSize; x++) {\n        let subCol = [];\n        for (let y = 0; y < boardSize; y++) {\n            subCol.push({\n                value: 0,                   // To store the number of mines around the cell.\n                revealed: false,            // To store if the cell is revealed.\n                x: x,                       // To store the x coordinate (the column index) of the cell.\n                y: y,                       // To store the y coordinate (the row index) of the cell.\n                flagged: false,             // To store if the cell is flagged.\n            });\n        }\n        board.push(subCol);\n    }\n\n    // Random bombs locations\n    let mineCount = 0;\n    while (mineCount < mineNum) {\n        let x = randomNum(0, boardSize - 1);\n        let y = randomNum(0, boardSize - 1);\n\n        if (board[x][y].value === 0) {            // Check this location has not been located a mine.\n            board[x][y].value = '💣';           // Change the value of the cell to '💣'\n            mineLocations.push([x, y]);\n            mineCount++;\n        }\n    }\n\n    {/* -- TODO 2 -- */ }\n    {/* Useful Hints: Calculate and update the value of each cell in the board. The value means the number of mines adjacent to the cell. */ }\n    {/* Reminder: Some cells in the board do not have \"Top\" position, some do not have \"Top-Right\" position .... */ }\n    {/* Warning: The value of any cell will not be bigger than 8 logically. */ }\n    {/* Testing: printBoard() */ }\n    const checkAround = (x,y) => {\n        let number = 0;\n        let checkPointList = [\n            [x-1, y-1],\n            [x, y-1],\n            [x+1, y-1],\n            [x+1, y],\n            [x+1, y+1],\n            [x, y+1],\n            [x-1, y+1],\n            [x-1, y]\n        ]\n        for (let checkPoint of checkPointList){\n            if (checkPoint[0] >= boardSize || checkPoint[0] < 0 || checkPoint[1] >= boardSize || checkPoint[1] < 0){\n                continue;\n            }else{\n                if(board[checkPoint[0]][checkPoint[1]].value=== '💣' ){\n                    number+=1;\n                }\n            }\n        }\n        return number\n    }\n\n    for (let x = 0; x < boardSize; x++) {\n        for (let y = 0; y < boardSize; y++) {\n            if(board[x][y].value!=='💣'){\n                board[x][y].value = checkAround(x,y)\n                checkAround(x,y)\n            }\n        }\n    }\n    // printBoard()\n    // console.log(board)\n    return { board, mineLocations };\n};","/****************************************************************************\n  FileName      [ reveal.js ]\n  PackageName   [ src/util ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file states the reaction when left clicking a cell. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nexport const revealed = (board, x, y, newNonMinesCount) => {\n  {/* -- TODO 4-2 -- */ }\n  {/* Useful Hint: If the cell is already revealed, do nothing. */ }\n  {/* Useful Hint: If the value of the cell is not 0, only show the cell value. */ }\n  let checkPointList = [\n    [x - 1, y - 1],\n    [x, y - 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1],\n    [x, y + 1],\n    [x - 1, y + 1],\n    [x - 1, y]\n  ]\n  let boardSize = board.length;\n  if (board[x][y].revealed === false) {\n    board[x][y].revealed = true\n    newNonMinesCount += 1\n    if (board[x][y].value === 0) {\n      for (let checkPoint of checkPointList) {\n        if (checkPoint[0] >= boardSize || checkPoint[0] < 0 || checkPoint[1] >= boardSize || checkPoint[1] < 0) {\n          continue;\n        } else {\n          let newBoard = board\n          let afterReveal = revealed(newBoard, checkPoint[0], checkPoint[1], newNonMinesCount)\n          board = afterReveal.board\n          newNonMinesCount = afterReveal.newNonMinesCount\n        }\n      }\n    }\n  }\n\n  {/* -- TODO 4-2 -- */ }\n  {/* Useful Hint: If the value of the cell is 0, we should try to find the value of adjacent cells until the value we found is not 0. */ }\n  {/* Useful Hint: The input variables 'newNonMinesCount' and 'board' may be changed in this function. */ }\n\n\n\n  return { board, newNonMinesCount };\n};\n","/****************************************************************************\n  FileName      [ Board.js ]\n  PackageName   [ src/components ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file generates the Board. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React, { useEffect, useState } from 'react';\nimport Cell from './Cell';\nimport Modal from './Modal';\nimport Dashboard from './Dashboard';\nimport createBoard from '../util/createBoard';\nimport { revealed } from '../util/reveal';\nimport './css/Board.css'\n\n\nconst Board = ({ boardSize, mineNum, backToHome }) => {\n    const [board, setBoard] = useState([]);                     // An 2-dimentional array. It is used to store the board.\n    const [nonMineCount, setNonMineCount] = useState(0);        // An integer variable to store the number of cells whose value are not '💣'.\n    const [mineLocations, setMineLocations] = useState([]);     // An array to store all the coordinate of '💣'.\n    const [gameOver, setGameOver] = useState(false);            // A boolean variable. If true, means you lose the game (Game over).\n    const [remainFlagNum, setRemainFlagNum] = useState(0);      // An integer variable to store the number of remain flags.\n    const [win, setWin] = useState(false);                      // A boolean variable. If true, means that you win the game.\n\n    useEffect(() => {\n        // Calling the function\n        freshBoard();\n    }, []);\n\n    // Creating a board\n    const freshBoard = () => {\n        {/* -- TODO 3-1 -- */ }\n        {/* Useful Hint: createBoard(...) */ }\n        var newBoardObj = createBoard(boardSize, mineNum)\n        setBoard(newBoardObj.board)\n        setMineLocations(newBoardObj.mineLocations)\n    }\n\n    const restartGame = () => {\n        {/* -- TODO 5-2 -- */ }\n        {/* Useful Hint: freshBoard() */ }\n        freshBoard()\n        setWin(false)\n        setGameOver(false)\n        setNonMineCount(0)\n        setRemainFlagNum(0)\n    }\n\n    // On Right Click / Flag Cell\n    const updateFlag = (e, x, y) => {\n        // To not have a dropdown on right click\n        e.preventDefault();\n        // Deep copy of a state\n        {/* -- TODO 3-2 -- */ }\n        {/* Useful Hint: A cell is going to be flagged. 'x' and 'y' are the xy-coordinate of the cell. */ }\n        {/* Reminder: If the cell is already flagged, you should unflagged it. Also remember to update the board and the remainFlagNum. */ }\n        {/* Reminder: The cell can be flagged only when it is not revealed. */ }\n        if (!board[x][y].revealed) {\n            let newBoard = [...board]\n            newBoard[x][y].flagged = !newBoard[x][y].flagged\n            setBoard(newBoard)\n\n            if (newBoard[x][y].flagged) {\n                setRemainFlagNum(remainFlagNum + 1)\n            } else {\n                setRemainFlagNum(remainFlagNum - 1)\n            }\n        }\n    };\n\n    const revealCell = (x, y) => {\n        {/* -- TODO 4-1 -- */ }\n        {/* Reveal the cell */ }\n        {/* Useful Hint: The function in reveal.js may be useful. You should consider if the cell you want to reveal is a location of mines or not. */ }\n        {/* Reminder: Also remember to handle the condition that after you reveal this cell then you win the game. */ }\n        if (board[x][y].revealed === false && board[x][y].flagged === false && gameOver === false && win === false) {\n            if (board[x][y].value === '💣') {\n                //  show all the mines that havenot been flagged and you lost the game.\n                for (let location of mineLocations) {\n                    let newboard = [...board]\n                    let afterReveal = revealed(newboard, location[0], location[1], nonMineCount)\n                    setBoard(afterReveal.board)\n                    setNonMineCount(afterReveal.newNonMinesCount)\n                }\n                setGameOver(true)\n            }\n\n            let newboard = [...board]\n            let afterReveal = revealed(newboard, x, y, nonMineCount)\n            // console.log(afterReveal.newNonMinesCount)\n            setBoard(afterReveal.board)\n            setNonMineCount(afterReveal.newNonMinesCount)\n            if (nonMineCount === boardSize*boardSize-mineNum-1) {\n                setWin(true)\n            }\n        }\n    };\n\n    return (\n        <div className='boardPage' >\n            <div className='boardWrapper' >\n                {/* <h1>This is the board Page!</h1>  This line of code is just for testing. Please delete it if you finish this function. */}\n\n                {/* -- TODO 3-1 -- */}\n                {/* Useful Hint: The board is composed of BOARDSIZE*BOARDSIZE of Cell (2-dimention). So, nested 'map' is needed to implement the board.  */}\n                {/* Reminder: Remember to use the component <Cell> and <Dashboard>. See Cell.js and Dashboard.js for detailed information. */}\n\n                <div className=\"boardContainer\">\n                    <Dashboard remainFlagNum={remainFlagNum} gameOver={gameOver} win={win} />\n                    {board.map((rowArray) => {\n                        return (\n                            <div id={\"row\" + rowArray[0].x} style={{ display: \"flex\" }}>\n                                {rowArray.map((item) => {\n                                    return <Cell rowIdx={item.x} colIdx={item.y} detail={item} updateFlag={updateFlag} revealCell={revealCell} ></Cell>\n                                })}\n                            </div>\n                        )\n                    })\n                    }\n                </div>\n            </div>\n            {(win===true || gameOver===true) ? <Modal restartGame={restartGame} backToHome={backToHome} win={win}/> : ''}\n        </div>\n        \n    );\n\n\n\n}\n\nexport default Board","/****************************************************************************\n  FileName      [ HomePage.js ]\n  PackageName   [ src/components ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file generates the Home page.  ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React, { useEffect, useState } from 'react';\nimport './css/HomePage.css';\n\n{/* -- TODO 2 -- */ }\nconst HomePage = ({ startGameOnClick, mineNumOnChange, boardSizeOnChange, mineNum, boardSize /* -- something more... -- */ }) => {\n  const [showPanel, setShowPanel] = useState(false);      // A boolean variable. If true, the controlPanel will show.\n  const [error, setError] = useState(false);              // A boolean variable. If true, means that the numbers of mines and the board size are invalid to build a game.\n\n  {/* Some functions may be added here! */ }\n  const difficultyAdjustmentOnClick = () => {\n    setShowPanel(!showPanel)\n  }\n\n  var controlWrapper, color;\n  const checkError = () => {\n    if (boardSize * boardSize < mineNum) {\n      setError(true)\n    } else {\n      setError(false)\n    }\n  }\n\n  useEffect(() => {\n    checkError() \n  })\n\n\n\n  // color\n  error ? color = { color: \"#880000\" } : color = { color: \"#0f0f4b\" }\n  // show Panel\n  if (showPanel) {\n    controlWrapper =\n      <div className=\"controlWrapper\">\n        <div className=\"error\" style={color}>{error ? \"ERROR: Mines number and board size are invalid!\" : \"\"}</div>\n        <div className=\"controlPanel\">\n          <div className=\"controlCol\" >\n            <p className=\"controlTitle\" >Mines Number</p>\n            <input type=\"range\" step=\"1\" min=\"1\" max=\"50\" defaultValue=\"10\" onChange={mineNumOnChange} />\n            <p className=\"controlNum\" style={color}>{mineNum}</p>\n          </div>\n          <div className=\"controlCol\" >\n            <p className=\"controlTitle\" >Board Size (nxn)</p>\n            <input type=\"range\" step=\"1\" min=\".\" max=\"20\" defaultValue=\"8\" onChange={boardSizeOnChange} />\n            <p className=\"controlNum\" style={color}>{boardSize}</p>\n          </div>\n        </div>\n      </div>\n  } else {\n    controlWrapper = \"\"\n  }\n\n\n  return (\n    <div className='HomeWrapper'>\n      <p className='title'>MineSweeper</p>\n      {/* -- TODO 1-1 -- */}\n      {error ? <button className=\"btn\" >Start Game</button> : <button className=\"btn\" onClick={startGameOnClick}>Start Game</button>}\n      <div className=\"controlContainer\" >\n        <button className=\"btn\" onClick={difficultyAdjustmentOnClick}>Difficulty Adjustment</button>\n        {controlWrapper}\n      </div>\n      {/* -- TODO 6-2 -- */}\n      {/* Useful Hint: <input type = 'range' min = '...' max = '...' defaultValue = '...'> */}\n      {/* Useful Hint: Error color: '#880000', default text color: '#0f0f4b', invisible color: 'transparent' */}\n      {/* Reminder: The defaultValue of 'mineNum' is 10, and the defaultValue of 'boardSize' is 8. */}\n\n    </div>\n  );\n\n}\nexport default HomePage;","/****************************************************************************\n  FileName      [ MineSweeper.js ]\n  PackageName   [ src/containers ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ The control and main page of MineSweeper. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React, { useState } from 'react';\nimport './MineSweeper.css';\nimport Board from '../components/Board'\nimport HomePage from '../components/HomePage'\n\nconst MineSweeper = () => {\n    const [startGame, setStartGame] = useState(false);      // A boolean variable. If true, show the Board, else show the HomePage.\n    const [mineNum, setMineNum] = useState(10);             // A integer variable to store the number of mines in the game. The default value is 10.\n    const [boardSize, setBoardSize] = useState(8);          // A integer variable to store the board size in the game. The default value is 8.\n    \n    {/* Useful Hint: The four functions below only need to fill up with those three hook functions above. */}\n    {/* -- TODO 1-2 -- */}\n    const startGameOnClick = () => {\n        setStartGame(true)\n    }\n    {/* -- TODO 6-2 -- */}\n    const mineNumOnChange = () => {\n        let Bar = document.querySelectorAll(\"input\")\n        setMineNum(Bar[0].value)\n    }\n    {/* -- TODO 6-2 -- */}\n    const boardSizeOnChange = () => {\n        let Bar = document.querySelectorAll(\"input\")\n        setBoardSize(Bar[1].value)\n    }\n    {/* -- TODO 5-2 -- */}\n    const backToHomeOnClick = () => {\n        setStartGame(false)\n        setMineNum(10)\n        setBoardSize(8)\n    }\n\n    return( \n        <div className='mineSweeper'>  \n            {/* -- TODO 1-1 -- */}\n            {/* Useful Hint: If ... <HomePage startGameOnClick = {startGameOnClick} .../> else <Board .../> */}\n            {/* Reminder: You can refer to the structure file in p.6 of Hack1.pdf. */}\n            {(startGame===false) ? \n            <HomePage startGameOnClick={startGameOnClick} mineNumOnChange={mineNumOnChange} boardSizeOnChange={boardSizeOnChange} mineNum={mineNum} boardSize={boardSize}/> :\n            <Board boardSize={boardSize} mineNum={mineNum} backToHome={backToHomeOnClick}/>}\n\n             \n        </div>\n    );\n}\nexport default MineSweeper;","/****************************************************************************\n  FileName      [ App.js ]\n  PackageName   [  ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [  ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React from 'react';\nimport './App.css';\nimport MineSweeper from './containers/MineSweeper';\n\nconst App = () => {\n  return (\n    <div className = 'App'>\n      <MineSweeper/>\n    </div>\n  );\n}\n\nexport default App;\n","/****************************************************************************\n  FileName      [ index.js ]\n  PackageName   [  ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [  ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}